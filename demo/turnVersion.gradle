version = new ProjectVersion(0,1)
// POGO Class
class ProjectVersion{
	Integer major
	Integer minor
	Boolean release
	
	ProjectVersion (Integer major ,Integer minor){
		this.major = major
		this.minor = minor
	}
	ProjectVersion (Integer major ,Integer minor,Boolean release){
		this(major,minor)
		this.release = release
	}
	@Override
	String toString(){
		"$major.$minor${release ? '-RELEASE' : '-SNAPSHOT'}"
	}
}
ext.versionFile = file('version.properties')
task loadVersion{
	project.version = readVersion()
}
ProjectVersion readVersion(){
	logger.quiet 'Reading the Version Config File'
	if(!versionFile.exists()){
		throw new GradleException("Version File does not exists : $versionFile.canonicalPath")
	}
	Properties versionProps = new Properties()
	versionFile.withInputStream {
		stream -> versionProps.load(stream)
	}
	new ProjectVersion(versionProps.major.toInteger(),versionProps.minor.toInteger(),versionProps.release.toBoolean())
}
// display Version
task printVersion {
   	doLast {
   		println "Version : $version"
   		logger.quiet "Logger Version : $version"
   	}
}

// gradle -b tasksL.gradle -q printVersion
//
// make project release by update version.properties
//
task makeReleaseVersion(group:'versioning',description:'Make project a release version')<<{
	version.release = true
	logger.quiet 'ant update version'
	ant.propertyfile(file:versionFile){
		entry(key:'release',type:'string',operation:'=',value:'true')
	}
	logger.quiet 'Update Success !'
}

task IOReleaseVersion(group:'versioning',description:'Makes project a release version'){
	inputs.property('release',version.release)
	outputs.file versionFile
	
	//also  use ant style code 
	doLast{
		logger.quiet 'IO update version' 
		version.release = true
		ant.propertyfile(file:versionFile){
			entry(key:'release',type:'string',operation:'=',value:'true')
		}
	}
}